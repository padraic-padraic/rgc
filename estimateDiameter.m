function [ diameter_estimate ] = estimateDiameter( arborFileName )
%ESTIMATEDIAMETER Estimate the x-y dimension of the arbor
%   This file loads the warped arbor generated by rgcAnalyzer and reads in
%   the tree information, finding the nodes at the end of every branch. 
%   We then use non-linear least squares analysis to fit an ellipse to the 
%   data, and take the major-axis length as the diameter.
    cached_arbor_name=arborFileName(1:length(arborFileName)-4);
    nodes_file = char(strcat(cached_arbor_name, '-nodes.txt'));
    edges_file = char(strcat(cached_arbor_name, '-edges.txt'));
    if exist(nodes_file, 'file') ~=2 || exist(edges_file, 'file') ~=2
        msgID='estimateDiameter:FileNotFound';
        msg='Could not find a required file';
        baseException = MException(msgID, msg);
        if exist(nodes_file, 'file')~=2
            msgID2='estimateDiameter:NodesNotFound';
            msg2=strcat('Could not find file: ', nodes_file);
        else
            msgID2='estimateDiameter:EdgesNotFound';
            msg2=strcat('Could not find file: ', edges_file);
        end
        fileException = MException(msgID2, msg2);
        baseException = addCause(baseExeption, fileException);
        throw(baseException)
    end
    edges = dlmread(edges_file);
    nodes = dlmread(nodes_file);
%     [nodes,edges,radii,nodeTypes,abort] = readArborTrace(arborFileName,[-1 0 1 2 3 4 5]); nodes = nodes + 1;
%     x=nodes(:,1)*voxelRes(1);y=nodes(:,2)*voxelRes(2);z=nodes(:,3)*voxelRes(3);
%     nodes =[x y z];
    degree_count = zeros(max(edges(:)), 1);
    for i=(1:size(edges,1))
        a=edges(i,1); b=edges(i,2);
        degree_count(a) = degree_count(a)+1;
        degree_count(b) = degree_count(b)+1;
    end
    points = nodes(degree_count==1,:); % All end nodes have degree one in the graph.
    assignin('base','points',points)
    dists = pdist(points, 'euclidean');
    diameter_estimate = max(dists);
%     x0 = mean(points(:,1)); y0 = mean(points(:,2));
%     rx_estimate = (max(points(:,1))-min(points(:,1)));
%     ry_estimate = (max(points(:,2))-min(points(:,2)));
%     options = optimset('Display','iter');
%     f = @(a) ((points(:,1)-x0).^2)/a(1).^2 + ((points(:,2)-y0).^2)/a(2).^2 -1;
%     a0 = [rx_estimate, ry_estimate];
%     af = lsqnonlin(f, a0, [], [], options);
%     diameter_estimate = 2*max(af);
%     x_radius = af(1);
%     y_radius = af(2);
%     t = 0:pi/10:2*pi;
%     plot(points(:,1), points(:,2),'*'), hold on
%     plot(x0,y0,'r*')
%     plot(x0+af(1)*cos(t), y0+af(2)*sin(t),'r')
end

